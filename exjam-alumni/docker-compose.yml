# ExJAM Alumni - Docker Compose Configuration
# Complete production stack with PostgreSQL, Redis, and monitoring

version: '3.8'

services:
  # ==========================================
  # Database - PostgreSQL
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: exjam-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-exjam_alumni}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - exjam-network

  # ==========================================
  # Cache - Redis
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: exjam-redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - exjam-network

  # ==========================================
  # Application - ExJAM Alumni
  # ==========================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: exjam-app
    restart: always
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-exjam_alumni}?schema=public
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DB_USER:-postgres}
      
      # Redis configuration
      REDIS_URL: redis://redis:6379
      
      # Application configuration
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_APP_URL: ${APP_URL:-http://localhost:3000}
      
      # Copy other environment variables
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      
      # Security
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET}
      
      # Email
      EMAIL_FROM: ${EMAIL_FROM}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      
      # Payments
      PAYSTACK_SECRET_KEY: ${PAYSTACK_SECRET_KEY}
      NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY: ${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY}
      
      # Monitoring
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - exjam-network

  # ==========================================
  # Reverse Proxy - Nginx
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: exjam-nginx
    restart: always
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - exjam-network

  # ==========================================
  # Database Backup Service
  # ==========================================
  backup:
    image: postgres:15-alpine
    container_name: exjam-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    command: >
      sh -c "
        echo 'Starting backup service...'
        while true; do
          echo 'Creating database backup...'
          pg_dump -h postgres -U ${DB_USER:-postgres} ${DB_NAME:-exjam_alumni} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup created successfully'
          
          # Keep only last 7 backups
          ls -t /backups/backup_*.sql | tail -n +8 | xargs -r rm
          
          # Sleep for 24 hours
          sleep 86400
        done
      "
    volumes:
      - backup_data:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - exjam-network
    profiles:
      - backup

  # ==========================================
  # Monitoring - Prometheus (Optional)
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: exjam-prometheus
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - exjam-network
    profiles:
      - monitoring

  # ==========================================
  # Monitoring - Grafana (Optional)
  # ==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: exjam-grafana
    restart: always
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - exjam-network
    profiles:
      - monitoring

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  backup_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==========================================
# Networks
# ==========================================
networks:
  exjam-network:
    driver: bridge